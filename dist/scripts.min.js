"use strict";

function getUIPref() {
    return new Promise(function (resolve, reject) {
        chrome.storage.sync.get({ "enableFlatUI": '' }, function (pref) {
            if (!chrome.runtime.error) {
                resolve(pref);
            } else {
                console.log("Runtime error.");
                reject(Error("Pref could not be loaded."));
            }
        });
    });
}

function updateUIPref(UIPref) {
    chrome.storage.sync.set({ "enableFlatUI": UIPref }, function () {
        chrome.runtime.error && console.log("Runtime error.");
    });
}

function toggleUI() {
    var bodyContainer = document.querySelector('body');

    if (bodyContainer.classList.contains('flatUI')) {
        bodyContainer.classList.remove('flatUI');
        updateUIPref(false);
    } else {
        bodyContainer.classList.add('flatUI');
        updateUIPref(true);
    }
    return false;
}

chrome.runtime.sendMessage({}, function () {
    var readyStateCheckInterval = setInterval(function () {
        if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);

            var bodyContainer = document.getElementsByTagName('body')[0],
                toggleButton = document.createElement('span'),
                buttonText = document.createElement('span');

            toggleButton.setAttribute('id', 'toggleButton');
            toggleButton.setAttribute('class', 'toggleButton');

            buttonText.setAttribute('class', 'toggleText');
            buttonText.innerHTML = 'IRC';

            bodyContainer.appendChild(toggleButton);
            toggleButton.appendChild(buttonText);

            getUIPref().then(function (pref) {
                if (pref.enableFlatUI) {
                    document.querySelector('body').classList.add('flatUI');
                } else {
                    document.querySelector('body').classList.remove('flatUI');
                }
                document.getElementById('toggleButton').onclick = toggleUI;
            });
        }
    }, 10);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZ2V0VUlQcmVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjaHJvbWUiLCJzdG9yYWdlIiwic3luYyIsImdldCIsInJ1bnRpbWUiLCJlcnJvciIsInByZWYiLCJjb25zb2xlIiwibG9nIiwiRXJyb3IiLCJ1cGRhdGVVSVByZWYiLCJVSVByZWYiLCJzZXQiLCJ0b2dnbGVVSSIsImJvZHlDb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImFkZCIsInNlbmRNZXNzYWdlIiwicmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInJlYWR5U3RhdGUiLCJjbGVhckludGVydmFsIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0b2dnbGVCdXR0b24iLCJjcmVhdGVFbGVtZW50IiwiYnV0dG9uVGV4dCIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwidGhlbiIsImVuYWJsZUZsYXRVSSIsImdldEVsZW1lbnRCeUlkIiwib25jbGljayJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxTQUFULEdBQXFCO0FBQ2pCLFdBQU8sSUFBSUMsT0FBSixDQUFhLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUNyQ0MsZUFBT0MsT0FBUCxDQUFlQyxJQUFmLENBQW9CQyxHQUFwQixDQUF3QixFQUFDLGdCQUFnQixFQUFqQixFQUF4QixFQUE4QyxnQkFBUTtBQUNsRCxnQkFBRyxDQUFDSCxPQUFPSSxPQUFQLENBQWVDLEtBQW5CLEVBQTBCO0FBQ3RCUCx3QkFBUVEsSUFBUjtBQUNILGFBRkQsTUFFTztBQUNIQyx3QkFBUUMsR0FBUixDQUFZLGdCQUFaO0FBQ0FULHVCQUFPVSxNQUFNLDJCQUFOLENBQVA7QUFDSDtBQUNKLFNBUEQ7QUFRSCxLQVRNLENBQVA7QUFVSDs7QUFFRCxTQUFTQyxZQUFULENBQXNCQyxNQUF0QixFQUE4QjtBQUMxQlgsV0FBT0MsT0FBUCxDQUFlQyxJQUFmLENBQW9CVSxHQUFwQixDQUF3QixFQUFDLGdCQUFnQkQsTUFBakIsRUFBeEIsRUFBa0QsWUFBTTtBQUNwRFgsZUFBT0ksT0FBUCxDQUFlQyxLQUFmLElBQXdCRSxRQUFRQyxHQUFSLENBQVksZ0JBQVosQ0FBeEI7QUFDSCxLQUZEO0FBR0g7O0FBRUQsU0FBU0ssUUFBVCxHQUFvQjtBQUNoQixRQUFNQyxnQkFBZ0JDLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBdEI7O0FBRUEsUUFBSUYsY0FBY0csU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMsUUFBakMsQ0FBSixFQUFnRDtBQUM1Q0osc0JBQWNHLFNBQWQsQ0FBd0JFLE1BQXhCLENBQStCLFFBQS9CO0FBQ0FULHFCQUFhLEtBQWI7QUFDSCxLQUhELE1BR087QUFDSEksc0JBQWNHLFNBQWQsQ0FBd0JHLEdBQXhCLENBQTRCLFFBQTVCO0FBQ0FWLHFCQUFhLElBQWI7QUFDSDtBQUNELFdBQU8sS0FBUDtBQUNIOztBQUVEVixPQUFPSSxPQUFQLENBQWVpQixXQUFmLENBQTJCLEVBQTNCLEVBQStCLFlBQU07QUFDakMsUUFBSUMsMEJBQTBCQyxZQUFhLFlBQU07QUFDN0MsWUFBSVIsU0FBU1MsVUFBVCxLQUF3QixVQUE1QixFQUF3QztBQUNwQ0MsMEJBQWNILHVCQUFkOztBQUVBLGdCQUFNUixnQkFBZ0JDLFNBQVNXLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQXRCO0FBQUEsZ0JBQ01DLGVBQWVaLFNBQVNhLGFBQVQsQ0FBdUIsTUFBdkIsQ0FEckI7QUFBQSxnQkFFTUMsYUFBYWQsU0FBU2EsYUFBVCxDQUF1QixNQUF2QixDQUZuQjs7QUFJQUQseUJBQWFHLFlBQWIsQ0FBMEIsSUFBMUIsRUFBZ0MsY0FBaEM7QUFDQUgseUJBQWFHLFlBQWIsQ0FBMEIsT0FBMUIsRUFBa0MsY0FBbEM7O0FBRUFELHVCQUFXQyxZQUFYLENBQXdCLE9BQXhCLEVBQWdDLFlBQWhDO0FBQ0FELHVCQUFXRSxTQUFYLEdBQXVCLEtBQXZCOztBQUVBakIsMEJBQWNrQixXQUFkLENBQTBCTCxZQUExQjtBQUNBQSx5QkFBYUssV0FBYixDQUF5QkgsVUFBekI7O0FBRUFqQyx3QkFBWXFDLElBQVosQ0FBa0IsZ0JBQVE7QUFDdEIsb0JBQUczQixLQUFLNEIsWUFBUixFQUFzQjtBQUNsQm5CLDZCQUFTQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxTQUEvQixDQUF5Q0csR0FBekMsQ0FBNkMsUUFBN0M7QUFDSCxpQkFGRCxNQUVPO0FBQ0hMLDZCQUFTQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxTQUEvQixDQUF5Q0UsTUFBekMsQ0FBZ0QsUUFBaEQ7QUFDSDtBQUNESix5QkFBU29CLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NDLE9BQXhDLEdBQWtEdkIsUUFBbEQ7QUFDSCxhQVBEO0FBUUg7QUFDSixLQTFCNkIsRUEwQjNCLEVBMUIyQixDQUE5QjtBQTJCSCxDQTVCRCIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldFVJUHJlZigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoe1wiZW5hYmxlRmxhdFVJXCI6ICcnfSwgcHJlZiA9PiB7XG4gICAgICAgICAgICBpZighY2hyb21lLnJ1bnRpbWUuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHByZWYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJ1bnRpbWUgZXJyb3IuXCIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihcIlByZWYgY291bGQgbm90IGJlIGxvYWRlZC5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVUlQcmVmKFVJUHJlZikge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcImVuYWJsZUZsYXRVSVwiOiBVSVByZWZ9LCAoKSA9PiB7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLmVycm9yICYmIGNvbnNvbGUubG9nKFwiUnVudGltZSBlcnJvci5cIik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVVJKCkge1xuICAgIGNvbnN0IGJvZHlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgXG4gICAgaWYgKGJvZHlDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdmbGF0VUknKSkge1xuICAgICAgICBib2R5Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2ZsYXRVSScpO1xuICAgICAgICB1cGRhdGVVSVByZWYoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJvZHlDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZmxhdFVJJyk7XG4gICAgICAgIHVwZGF0ZVVJUHJlZih0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5jaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7fSwgKCkgPT4ge1xuICAgIGxldCByZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKCAoKSA9PiB7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICBjb25zdCBib2R5Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSxcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSxcbiAgICAgICAgICAgICAgICAgIGJ1dHRvblRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3RvZ2dsZUJ1dHRvbicpO1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCd0b2dnbGVCdXR0b24nKTtcblxuICAgICAgICAgICAgYnV0dG9uVGV4dC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywndG9nZ2xlVGV4dCcpO1xuICAgICAgICAgICAgYnV0dG9uVGV4dC5pbm5lckhUTUwgPSAnSVJDJztcblxuICAgICAgICAgICAgYm9keUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2dnbGVCdXR0b24pO1xuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLmFwcGVuZENoaWxkKGJ1dHRvblRleHQpO1xuXG4gICAgICAgICAgICBnZXRVSVByZWYoKS50aGVuKCBwcmVmID0+IHtcbiAgICAgICAgICAgICAgICBpZihwcmVmLmVuYWJsZUZsYXRVSSkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LmFkZCgnZmxhdFVJJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmNsYXNzTGlzdC5yZW1vdmUoJ2ZsYXRVSScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlQnV0dG9uJykub25jbGljayA9IHRvZ2dsZVVJO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCAxMCk7XG59KTtcbiJdfQ==
